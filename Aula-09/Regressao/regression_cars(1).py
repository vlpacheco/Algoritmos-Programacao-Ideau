# -*- coding: utf-8 -*-
"""Regression-Cars(1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13qfBqDj8cY1TwTqoqa5ptLhHLfEtINIF

# Regressao e Analise de Correlacao

Exemplo simples de regressao
https://towardsdatascience.com/introduction-to-linear-regression-in-python-c12a072bedf0
"""

#Carregando as bibliotecas
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

#Carregando a planilha para o ambiente Colab
carros_usados = pd.read_csv('carros-usados.csv')
carros_usados

#Ver apenas as linhas iniciais, chamadas de 'head'
carros_usados.head()

#Ver apenas as ultimas linhas 'tail'
carros_usados.tail()

#Analisando as principais caracteristicas
carros_usados.describe()

"""# Correlacao entre as variáveis

Em probabilidade e estatística, correlação, dependência ou associação é qualquer relação estatística (causal ou não causal) entre duas variáveis e correlação é qualquer relação dentro de uma ampla classe de relações estatísticas que envolva dependência entre duas variáveis.

![correlation](../Aula-08-Regression/correlation.png)

## Analisando as correlacoes do Dataset - "carros-usados"
"""

#Plot para exemplifica, analisando as correlacoes
#Correlacao Positiva
plt.plot(carros_usados['ano'], carros_usados['preco'])

#Plot para exemplifica, analisando as correlacoes
#Correlacao Negativa
plt.plot(carros_usados['ano'], carros_usados['kilometragem'])

#Analisando a correlacao das variaveis
carros_usados.corr() #Variáveis Numéricas

#Criando um plot da correlacao
#Correlacao editada
corr = carros_usados.corr() 
corr.style.background_gradient(cmap = 'coolwarm')

"""# Tipos de Variáveis

Variáveis podem ser classificadas da seguinte forma:

### Variáveis Quantitativas: são as características que podem ser medidas em uma escala quantitativa, ou seja, apresentam valores numéricos que fazem sentido. Podem ser contínuas ou discretas.

### Variáveis Qualitativas (ou categóricas): são as características que não possuem valores quantitativos, mas, ao contrário, são definidas por várias categorias, ou seja, representam uma classificação dos indivíduos. Podem ser nominais ou ordinais.

![equation](../Aula-08-Regression/variaveis.png)

![equation](../Aula-08-Regression/regression-equation.png)

![regression](../Aula-08-Regression/regression-2.png)
"""

#Conda install scikit on MacOS M1
#yes command
#! conda install --yes scikit-learn

#Pip install Windows
!pip install -U scikit-learn

# Importanto a Biblioteca scikit
from sklearn.linear_model import LinearRegression

#Replotando os carros
carros_usados

#Quais maiores correlacoes?
#Variavel independente (x) = ano
#Variavel Dependente (y) = preco

x = carros_usados['ano'] #independente
y = carros_usados['preco'] #depentende

#Convertendo os dados
#To numpy
x = x.to_numpy(x)
y = y.to_numpy(y)

# Numpy X, uma sequencia
x

#Reshaping the model
x = x.reshape(-1, 1)
y = y.reshape(-1, 1)

#Preparando para o modelo, formato requerido
x

#Criando o modelo de Regressao
model = LinearRegression()

#Fit the model // Treinando o modelo
model.fit(x, y)

#Fazendo predicoes com o modelo treinado
y_pred = model.predict(x)

#Qual a acuracia do modelo?
from sklearn.metrics import r2_score, mean_squared_error

r2 = r2_score(y, y_pred)
print('O valor do R2 é: %.4f' %r2)

"""## Calculando os coeficientes e montando a equacao

### Y = B0 + B1X1 + Erro
"""

#Encontranto o B0, intercept
B0 = model.intercept_
B0 = float(B0)
B0

#Encontrando o B1
B1 = model.coef_
B1 = B1[0, 0]
B1

#Erro Residual
erro = mean_squared_error(y_pred, y)
erro

#Criando a Equacao
#Y = B0 + B1X1 + Erro
regression_equation = 'Y = {:.4f} + {:.4f}X1 + {:.4f}'.format(B0, B1, erro)
regression_equation

"""## Plotando"""

#Plotando as respostas
plt.plot(x, y)
plt.plot(x, y_pred)

# Commented out IPython magic to ensure Python compatibility.
#Plotando as respostas e a equacao
# %matplotlib notebook
fig, ax = plt.subplots()

textstr = '\n'.join((r'R2 = %.2f' % (r2)))


plt.plot(x, y)
plt.plot(x, y_pred)
props = dict(boxstyle = 'round', facecolor = 'wheat', alpha = 0.5)
ax.text(2000, 21500, 'Y = -2395092.4109 + 1198.7964X1 + 2769569.6650', horizontalalignment = 'left', 
        verticalalignment = 'top', fontsize = 8, bbox = props)
ax.text(2000, 20000, f'O R2 é: {round(r2, 2)}', horizontalalignment = 'left', 
        verticalalignment = 'top', fontsize = 8, bbox = props)
ax.set_xlabel('Ano', fontsize = 12)
ax.set_ylabel('Preco', fontsize = 12)
plt.savefig('anoxpreco.png', dpi = 300)

"""## Exercicio DataSet IRIS
https://archive.ics.uci.edu/ml/datasets/iris

### Para o Dataset em questao, analise:

a) A correlacao das variáveis;

b) Crie um modelo de predicao.
"""

#Carregando o Dataset
iris = pd.read_csv('iris.csv')

#Criando um plot da correlacao
#Correlacao editada
corr = iris.corr() 
corr.style.background_gradient(cmap = 'coolwarm')

#Plot para exemplifica, analisando as correlacoes 
#Correlacao Positiva
plt.plot(iris['sepal.length'], iris['petal.length'])

#Plot para exemplifica, analisando as correlacoes 
#Correlacao Positiva
plt.plot(iris['petal.width'], iris['petal.length'])

#Quais maiores correlacoes?
#Variavel independente (x) = petal.width
#Variavel Dependente (y) = petal.length

x = iris['petal.width'] #independente
y = iris['petal.length'] #depentende

#Convertendo os dados
#To numpy
x = x.to_numpy(x)
y = y.to_numpy(y)

#Reshaping the model
x = x.reshape(-1, 1)
y = y.reshape(-1, 1)

#Criando o modelo de Regressao
model = LinearRegression()

#Fit the model // Treinando o modelo
model.fit(x, y)

#Fazendo predicoes com o modelo treinado
y_pred = model.predict(x)

#Qual a acuracia do modelo?
from sklearn.metrics import r2_score, mean_squared_error

r2 = r2_score(y, y_pred)
print('O valor do R2 é: %.4f' %r2)

#Encontranto o B0, intercept
B0 = model.intercept_
B0 = float(B0)
B0

#Encontrando o B1
B1 = model.coef_
B1 = B1[0, 0]
B1

#Erro Residual
erro = mean_squared_error(y_pred, y)
erro

#Criando a Equacao
#Y = B0 + B1X1 + Erro
regression_equation = 'Y = {:.4f} + {:.4f}X1 + {:.4f}'.format(B0, B1, erro)
regression_equation

# Commented out IPython magic to ensure Python compatibility.
#Plotando as respostas e a equacao
# %matplotlib notebook
fig, ax = plt.subplots()

textstr = '\n'.join((r'R2 = %.2f' % (r2)))


plt.plot(x, y)
plt.plot(x, y_pred)
props = dict(boxstyle = 'round', facecolor = 'wheat', alpha = 0.5)
ax.text(0.2, 7, 'Y = -2395092.4109 + 1198.7964X1 + 2769569.6650', horizontalalignment = 'left', 
        verticalalignment = 'top', fontsize = 8, bbox = props)
ax.text(0.2, 6.5, f'O R2 é: {round(r2, 2)}', horizontalalignment = 'left', 
        verticalalignment = 'top', fontsize = 8, bbox = props)
ax.set_xlabel('petal.width', fontsize = 12)
ax.set_ylabel('petal.length', fontsize = 12)
plt.savefig('widthxlength.png', dpi = 300)

"""#Ajustar escalas
plt.xlim([0, 0.2])
plt.xticks(np.arange(0, 0.200, 0.02))
plt.ylim([0, 1000])
plt.yticks(np.arange(0, 1000, 100))
plt.show()
"""

